function count_items_table(first_speaker, second_speaker)
	local item_list = {}
	local item_object = nil
	local counter = 0
	local item_section = nil

	for index = 0, db.actor:object_count() - 1 do
		item_object = db.actor:object(index)
		item_section = item_object:section()
		if item_list[item_section] == nil then
			item_list[item_section] = 1
		else
			item_list[item_section] = item_list[item_section] + 1
		end
--		news_manager.relocate_item(db.actor, "out", item_section)
--		news_manager.relocate_money(db.actor, "out", item_list[item_section])
--		news_manager.relocate_money(db.actor, "out", db.actor:money())
	end
	if item_list == nil then
		if db.storage[db.actor:id()].pstor["maxfu_item_list"] then
			db.storage[db.actor:id()].pstor["maxfu_item_list"] = nil
		end
	else
		if db.storage[db.actor:id()].pstor == nil then
			db.storage[db.actor:id()].pstor = {}
		end
		db.storage[db.actor:id()].pstor["maxfu_item_list"] = item_list
	end
end

function remove_items(section_name, qty)
	local inv_item = nil
	local item_id = nil
	local item_count = 0

	for index = 0, db.actor:object_count() - 1 do
		inv_item = db.actor:object(index)
		if inv_item:section() == section_name then
			if item_count < qty then
				item_id = inv_item:id()
				alife():release(alife():object(tonumber(item_id)), true)
				news_manager.relocate_item(db.actor, "out", section_name)
				item_count = item_count + 1
			else
				return
			end
		end
	end
end

function check_recipe(recipe)
	if recipe["result"] == nil then
		return false
	end

	local item_list = {}
	if db.storage[db.actor:id()].pstor ~= nil then
		item_list = db.storage[db.actor:id()].pstor["maxfu_item_list"]
	else
		return false
	end

	local cost = 0
	if recipe["cost"] ~= nil then
		cost = recipe["cost"]
	end

	if db.actor:money() < cost then
		return false
	end
--	_z.nvDebug(db.actor:money())

	if item_list ~= nil and item_list ~= {} then
		for item_section, item_qty in pairs(recipe) do
			if item_section ~= "cost" and item_section ~= "result" and item_section ~= "lucky" and item_section ~= "luck" then
				if item_list[item_section] ~= nil then
					if item_list[item_section] < item_qty then
						return false
					end
					_z.nvDebug(item_section)
					_z.nvDebug(item_qty)
					_z.nvDebug(item_list[item_section])
				else
					return false
				end
			end
		end
	else
		return false
	end

	return true
end

function enhance_recipe(trader, actor, recipe)
	if recipe["result"] == nil then
		return false
	end

	for item_section, item_qty in pairs(recipe) do
		if item_section ~= "cost" and item_section ~= "result" and item_section ~= "lucky" and item_section ~= "luck" then
			remove_items(item_section, item_qty)
		end
	end

	if recipe["cost"] ~= nil then
		dialogs.relocate_money(actor, recipe["cost"], "out")
	end

	if recipe["lucky"] ~= nil and recipe["luck"] ~= nil then
		local luck = math.random(0,99)
		if luck >= recipe["luck"] then
			dialogs.relocate_item_section(trader, recipe["result"], "in")
		else
			_z.nvDebug("Lucky you")
			dialogs.relocate_item_section(trader, recipe["lucky"], "in")
		end
	else
		dialogs.relocate_item_section(trader, recipe["result"], "in")
	end
end

recipe_af_medusa = {["af_medusa"]=5, ["cost"]=1000, ["result"]="af_medusa_m1", ["lucky"]="af_medusa_m2", ["luck"]=5}

function check_af_medusa()
	return check_recipe(recipe_af_medusa)
end

function enhance_af_medusa(trader, actor)
	enhance_recipe(trader, actor, recipe_af_medusa)
end

recipe_af_blood = {["af_blood"]=5, ["cost"]=1000, ["result"]="af_blood_m1", ["lucky"]="af_blood_m2", ["luck"]=5}

function check_af_blood()
	return check_recipe(recipe_af_blood)
end

function enhance_af_blood(trader, actor)
	enhance_recipe(trader, actor, recipe_af_blood)
end


recipe_af_cristall_flower = {["af_cristall_flower"]=5, ["cost"]=1000, ["result"]="af_cristall_flower_m1", ["lucky"]="af_cristall_flower_m2", ["luck"]=5}

function check_af_cristall_flower()
	return check_recipe(recipe_af_cristall_flower)
end

function enhance_af_cristall_flower(trader, actor)
	enhance_recipe(trader, actor, recipe_af_cristall_flower)
end

recipe_af_mincer_meat = {["af_mincer_meat"]=5, ["cost"]=1000, ["result"]="af_mincer_meat_m1", ["lucky"]="af_mincer_meat_m2", ["luck"]=5}

function check_af_mincer_meat()
	return check_recipe(recipe_af_mincer_meat)
end

function enhance_af_mincer_meat(trader, actor)
	enhance_recipe(trader, actor, recipe_af_mincer_meat)
end

recipe_af_rusty_kristall = {["af_rusty_kristall"]=5, ["cost"]=1000, ["result"]="af_rusty_kristall_m1", ["lucky"]="af_rusty_kristall_m2", ["luck"]=5}

function check_af_rusty_kristall()
	return check_recipe(recipe_af_rusty_kristall)
end

function enhance_af_rusty_kristall(trader, actor)
	enhance_recipe(trader, actor, recipe_af_rusty_kristall)
end

recipe_ammo_9x18_heavy = {["ammo_9x18_fmj"]=5, ["af_medusa"]=1, ["cost"]=1000, ["result"]="ammo_9x18_heavy"}

function check_ammo_9_18_fmj()
	return check_recipe(recipe_ammo_9x18_heavy)
end

function enhance_ammo_9_18_fmj(trader, actor)
	enhance_recipe(trader, actor, recipe_ammo_9x18_heavy)
end
