local m1_qty = 5
local m1_cost = 1000
local m2_qty = 5
local m2_cost = 5000

function count_items(section_name)
	local inv_item = nil
	local counter = 0

	for index = 0, db.actor:object_count() - 1 do
		inv_item = db.actor:object(index)
		if inv_item:section() == section_name then
			counter = counter + 1
		end
	end
	return counter
end

function remove_items(section_name, qty)
	local inv_item = nil
	local item_id = nil
	local item_count = 0

	for index = 0, db.actor:object_count() - 1 do
		inv_item = db.actor:object(index)
		if inv_item:section() == section_name then
			if item_count < qty then
				item_id = inv_item:id()
				alife():release(alife():object(tonumber(item_id)), true)
				news_manager.relocate_item(db.actor, "out", section_name)
				item_count = item_count + 1
			end
		end
	end
end

function check_artifact_qty(section_name)
	local artifact_qty = count_items(section_name)
	if artifact_qty > m1_qty and db.actor:money() >= m1_cost then
		return true
	end
	news_manager.relocate_item(db.actor, "out", section_name)
	news_manager.relocate_money(db.actor, "out", artifact_qty)
	news_manager.relocate_money(db.actor, "out", db.actor:money())
	return false
end

function enhance_af_m1(trader, actor, section_name)
	remove_items(section_name, m1_qty)
    dialogs.relocate_item_section(trader, section_name.."_m1", "in")
--	alife():create(section_name.."_m1", actor:position(), actor:level_vertex_id(), actor:game_vertex_id(), actor:id())
	dialogs.relocate_money(actor, m1_cost, "out")
end


function check_af_medusa(trader, actor)
	local section_name = "af_medusa"
	return check_artifact_qty(section_name)
end

function enhance_af_medusa(trader, actor)
	local section_name = "af_medusa"
	enhance_af_m1(trader, actor, section_name)
end

function check_af_blood(trader, actor)
	local section_name = "af_blood"
	return check_artifact_qty(section_name)
end

function enhance_af_blood(trader, actor)
	local section_name = "af_blood"
	enhance_af_m1(trader, actor, section_name)
end

function check_af_cristall_flower(trader, actor)
	local section_name = "af_cristall_flower"
	return check_artifact_qty(section_name)
end

function enhance_af_cristall_flower(trader, actor)
	local section_name = "af_cristall_flower"
	enhance_af_m1(trader, actor, section_name)
end

function check_af_mincer_meat(trader, actor)
	local section_name = "af_mincer_meat"
	return check_artifact_qty(section_name)
end

function enhance_af_mincer_meat(trader, actor)
	local section_name = "af_mincer_meat"
	enhance_af_m1(trader, actor, section_name)
end



function check_af_rusty_kristall(trader, actor)
	local section_name = "af_rusty_kristall"
	return check_artifact_qty(section_name)
end

function enhance_af_rusty_kristall(trader, actor)
	local section_name = "af_rusty_kristall"
	enhance_af_m1(trader, actor, section_name)
end


--------------

function trader_check_money_s2(trader, actor)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_check_money_s6(trader, actor)
	local item_in_slot = db.actor:item_in_slot(6)
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		if item_repair_cost > 0 and db.actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_repiar_weapon_s1(trader, actor)
	local item_in_slot = db.actor:item_in_slot(1)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end
end

function trader_repiar_weapon_s2(trader, actor)
	local item_in_slot = db.actor:item_in_slot(2)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end
end

function trader_repiar_armor_s6(trader, actor)
	local item_in_slot = db.actor:item_in_slot(6)
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end	
end

function repair_costs(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	
	local item_name_and_price = ""
	local item_repair_cost = 0
	if db.actor ~= nil then 
		local item_in_slot_1 = db.actor:item_in_slot(1)
		local item_in_slot_2 = db.actor:item_in_slot(2)
		local item_in_slot_6 = db.actor:item_in_slot(6)
	
		if item_in_slot_1 ~= nil then 
			item_repair_cost = math.floor( (1-item_in_slot_1:condition()) * item_in_slot_1:cost() * weapon_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_0").." %c[255,238,155,23]"..item_repair_cost.."Ru%c[default]"
				db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_2 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_2:condition()) * item_in_slot_2:cost() * weapon_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_1").." %c[255,238,155,23]"..item_repair_cost.."Ru%c[default]"
				db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_6 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_6:condition()) * item_in_slot_6:cost() * armor_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_2").." %c[255,238,155,23]"..item_repair_cost.."Ru%c[default]"
				db.actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
	end
end

