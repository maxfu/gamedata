----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
-- Обычное поведение

class "action_process_death"

function action_process_death:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function action_process_death:death_callback(victim, who)
	if who ~= nil then
		printf("[%s] killed by [%s]", victim:name(), who:name() )
		db.storage[victim:id()].death.killer = who:id()
		-- faction change mod
		if db.actor ~= nil and db.actor:id() == who:id() and db.actor:character_community() == "military" and victim:character_community() == "military" then
			faction_change.fc_dishonorable_discharge()
		end
		
		if db.actor ~= nil and db.actor:id() == who:id() then
			if victim:character_community() == "stalker" then db.actor:give_info_portion("fc_actor_killed_some_stalker") 
			elseif victim:character_community() == "freedom" then db.actor:give_info_portion("fc_actor_killed_some_freedom") 
			elseif victim:character_community() == "dolg" then db.actor:give_info_portion("fc_actor_killed_some_duty") 
			elseif victim:character_community() == "bandit" then db.actor:give_info_portion("fc_actor_killed_some_bandit") 
			elseif victim:character_community() == "killer" then db.actor:give_info_portion("fc_actor_killed_some_merc") 
			elseif victim:character_community() == "ecolog" then db.actor:give_info_portion("fc_actor_killed_some_ecolog") 
			elseif victim:character_community() == "military" then db.actor:give_info_portion("fc_actor_killed_some_military") 
			elseif victim:character_community() == "monolith" then db.actor:give_info_portion("fc_actor_killed_some_monolith") 
			elseif victim:character_community() == "zombied" then db.actor:give_info_portion("fc_actor_killed_some_zombied") 
			end
		end
		-- faction change mod end
	else
		printf("[%s] killed by [Unknown]", victim:name())
		db.storage[victim:id()].death.killer = -1
	end

	if db.actor then
		if self.st.info then
			xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.info)
		end

		if self.st.info2 then
			xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.info2)
		end
	end
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage) 	
	local action = this.action_process_death(npc, storage)
	xr_logic.subscribe_action_for_events(npc, storage, action)
end


function set_death(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end

function reset_death(npc, scheme, st, section)
	local death_section = utils.cfg_get_string(st.ini, st.section_logic, "on_death", npc, false, "")
--	printf("reset death for [%s]", npc:name())
	if death_section then
--		printf("reset death, section present")
		local tmp = utils.cfg_get_string(st.ini, death_section, "on_info", npc, false, "")
--		printf("tmp [%s]", tostring(tmp))
		if tmp then
			st.death.info = xr_logic.parse_condlist(npc, death_section, "death", tmp)
		end
--		printf("tmp [%s]", tostring(tmp))		
		tmp = utils.cfg_get_string(st.ini, death_section, "on_info2", npc, false, "")
		if tmp then
			st.death.info2 = xr_logic.parse_condlist(npc, death_section, "death", tmp)
		end
	end
end