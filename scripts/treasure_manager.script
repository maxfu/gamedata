-- 070611 - modified spot removal to help clear spots
-- 070706 - added optional line to say what the secret stash holds
-- 070823 - adapted to patch 1.0004, reduced mem usage of official version
-- 070827 - workaround to prevent empty stashes on save/load of local level
-- 071003 - merge with bardak's loss workaround code

local treasure_manager = nil

function parse_spawns(line)
	if line == nil then
		return {}
	end

	--' если default-ов больше, че?значений ?ini, то забить недостающи?последни?значение?из ini
	local t = se_respawn.parse_names(line)
	local n = table.getn(t)
		
	local ret_table = {}
	local k = 1

	while k <= n do
		local spawn = {}
		spawn.section = t[k]
		-- Проверяем чт?эт?не послед?я запись
		if t[k+1] ~= nil then
			local p = tonumber(t[k+1])
			-- проверяем чт?вторым числом задана вероятность, ?не друг? секц? спавну
			if p then
				-- забиваем числ?
				spawn.prob = p
				k = k + 2
			else
				-- забиваем дефолт 1
				spawn.prob = 1
				k = k + 1
			end
		else
			spawn.prob = 1
			k = k + 1
		end
		table.insert(ret_table, spawn)
	end
	return ret_table
end


class "CTreasure"
function CTreasure:__init()
	--' На конструкторе вычитываем LTX ?создае?заготовк?квесто?
	self.ini = ini_file("misc\\treasure_manager.ltx")

	--' Итерируемся по всем настройкам фраз
	if not self.ini:section_exist("list") then
		abort("There is no section [list] in treasure_manager.ltx")
	end
	local n = self.ini:line_count("list")
	local id, value = "",""

	--' начальная установк?
	self.treasure_info = {}

	for i=0,n-1 do
		result, id, value	= self.ini:r_line("list",i,"","")
		
		self.treasure_info[id] = {}

		self.treasure_info[id].target		= utils.cfg_get_number(self.ini, id, "target", nil, true)
		self.treasure_info[id].name			= utils.cfg_get_string(self.ini, id, "name", nil, true, "")
		self.treasure_info[id].description	= utils.cfg_get_string(self.ini, id, "description", nil, true, "")
		self.treasure_info[id].items		= parse_spawns(utils.cfg_get_string(self.ini, id, "items", nil, true, ""))

		local community	= parse_names(utils.cfg_get_string(self.ini, id, "community", nil, false, "", "stalker, bandit, dolg, freedom"))
		self.treasure_info[id].community = {}
		for k,v in pairs(community) do
			self.treasure_info[id].community[v] = true
		end


		if self.treasure_info[id].items == nil then
			abort("cant find 'items' in %s", id)
		end

		self.treasure_info[id].condlist		= xr_logic.parse_condlist(db.actor, "treasure_manager", "condlist", utils.cfg_get_string(self.ini, id, "condlist", nil, false, "", ""))
		
		--' Отмети?тайник ка?новы?
		self.treasure_info[id].active = false
		self.treasure_info[id].done = false

		--print_table(self.treasure_info)
	end

	--' Вспомогательны?таблиц?для облегчен? поиска
	self.treasure_by_target = {}
	for k,v in pairs(self.treasure_info) do
		self.treasure_by_target[v.target] = k
	end

	self.loss_workaround_queue = {}
	-- dbglog("  Treasure Manager init complete.")
end
--' Юзание инициатора (возможност?выдать тайник)
function CTreasure:use(npc)
	printf("TREASURE USE")

	-- This block prevents getting new secrets from previously-searched bodies
	--' Проверим, не вызывались ли мы уж?для этог?объект? 
	local se_obj = alife():object(npc:id())
	if se_obj.treasure_processed == true then
		return
	end
	se_obj.treasure_processed = true

	--' Нужн?рандомно выбрат?один из тайников.
	local avail = {}
	local tr_sum = 0
	-- nv - uncomment this block for keep-quiet feature (no secrets)
	-- if tr_sum == 0 then return end

	for k,v in pairs(self.treasure_info) do
		if v.done == false then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			-- nv - don't include treasure_prob == 0 case!
			if tonumber(treasure_prob) > 0 and
			v.community[npc:character_community()] == true and
			v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
					-- nv - secret given, just return
					return
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or
		math.random(100) < 65
	then
		return
	end

	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			self:give_treasure(v.k)
			break
		end
	end
end
--' Сохранение
function CTreasure:check()
	--' Проверка тайников
	for k,v in pairs(self.treasure_info) do
		--' Выдать тайник
		self:give_treasure(k)
	end
end
--' Выдача тайник?
function CTreasure:give_treasure(k)
	local v = self.treasure_info[k]
	local sim = alife()
	local obj = sim:story_object(v.target)
	if obj ~= nil then
		-- news_manager.send_treasure(v.name) --moved below

		--' Пометить на карт?	
		local text = "%c[255,238,155,23]"..game.translate_string(v.name).."\\n"..
				"%c[default]"..game.translate_string(v.description)

		-- level.map_add_object_spot_ser(obj.id, "treasure", text) --moved below

		--' Сгенерит?вещи
		--'
		--' Из-за какого-то дефект??xrGame.dll тайник поте?ет
		--' сгенерированно?содержимое ?следующе?ситуации:
		--'  1) получена ссылка на тайник, которы?находится ?online;
		--'  2) игро?сохраняет? ?загружается;
		--'  3) межд?1 ?2 не было переводо?тайник??offline хо? бы ра?
		--' Для предотвращен? этог?создаё?вещи ?актёра, запоминаем
		--' идентификаторы, ??вызове actor_binder:update() переноси?их
		--' ?нужный ящи?
		local item_ids = {}
		local pos, lvid, gvid, pid, new_obj
		local need_workaround = level.object_by_id(obj.id) ~= nil
		if need_workaround then
			pos = db.actor:position()
			lvid = db.actor:level_vertex_id()
			gvid = db.actor:game_vertex_id()
			pid = db.actor:id()
		else
			pos = obj.position
			lvid = obj.m_level_vertex_id
			gvid = obj.m_game_vertex_id
			pid = obj.id
		end
		for kk,vv in pairs(v.items) do
			if ammo_section[vv.section] == true then
				local left, box_size = vv.prob, system_ini():r_u32(vv.section, "box_size")
				while left > box_size do
					new_obj = sim:create_ammo(vv.section, pos, lvid, gvid, pid, box_size)
					table.insert(item_ids, new_obj.id)
					left = left - box_size
				end
				if left > 0 then
					new_obj = sim:create_ammo(vv.section, pos, lvid, gvid, pid, left)
					table.insert(item_ids, new_obj.id)
				end
			else
				for i=1,vv.prob do
					new_obj = sim:create(vv.section, pos, lvid, gvid, pid)
					table.insert(item_ids, new_obj.id)
				end
			end
			-- nv - uncomment this line if you want to know what the secret stash holds
			text = text.."\\n . %c[255,155,238,23]"..game.translate_string(vv.section)
		end
		if need_workaround then
			self.loss_workaround_queue[v.target] = item_ids
			bind_stalker.nv_need_update = true
		end

		news_manager.send_treasure(v.name)
		level.map_add_object_spot_ser(obj.id, "treasure", text)

		--' Помети?тайник ка?выданный
		self.treasure_info[k].active = true
		self.treasure_info[k].done = true
	else
		printf("TREASURE %s, target doesnt exist", k)
	end
end
--' Перено?содержимог?для предотвращен? возможно?потери
function CTreasure:loss_workaround()
	for k,v in pairs(self.loss_workaround_queue) do
		box = level_object_by_sid(k)
		if box == nil then
			abort("inv box nil")
		end
		-- dbglog("loss_workaround:box=%d", k)
		for kk,vv in ipairs(v) do
			-- dbglog("  item:name=%s", level.object_by_id(vv):name())
			db.actor:transfer_item(level.object_by_id(vv), box)
		end
	end
	self.loss_workaround_queue = {}
end
--' Снимае?отметк??тайник?
function CTreasure:treasure_empty(box, box_story_id)
	-- printf("!!! treasure empty")

	-- nv - in case the box is used as a regular stash, don't reset ungiven secret
	if tonumber(level.map_has_object_spot(box:id(), "treasure")) > 0 then
		local k = self.treasure_by_target[box_story_id]

		if k == nil or self.treasure_info[k] == nil then 
			return
		end

		self.treasure_info[k].active = false
		if _z then _z.report_stash_emptied(self.treasure_info[k].name) end

		level.map_remove_object_spot(box:id(), "treasure")
	end
end
--' Сохранение
function CTreasure:save(p)
	--' Сохраняем размер таблиц?
	local size = 0
	for k,v in pairs(self.treasure_info) do
		size = size + 1
	end
	p:w_u16(size)
	for k,v in pairs(self.treasure_info) do
		p:w_u16(v.target)
		p:w_bool(v.active)
		p:w_bool(v.done)
	end
end
--' Загрузка
function CTreasure:load(p)
	local t = p:r_u16()
	for i = 1,t do
		local k = self.treasure_by_target[p:r_u16()]
		self.treasure_info[k].active = p:r_bool()
		self.treasure_info[k].done = p:r_bool()
	end
end


function get_treasure_manager()
	if treasure_manager == nil then
		treasure_manager = CTreasure()
	end
	return treasure_manager
end

function take_item_from_box(box, box_story_id)
	printf("!!! take item from box %s", tostring(box:is_inv_box_empty()))
	if box:is_inv_box_empty() == true then
		get_treasure_manager():treasure_empty(box, box_story_id)
	end
end

function save(p)
	get_treasure_manager():save(p)
end
function load(p)
	get_treasure_manager():load(p)
end
function clear_treasure_manager()
	treasure_manager = nil
end